# coding: utf-8

"""
    The Jina Embedding Serving API

    This is the UniversalAPI to access all the Jina embedding models

    The version of the OpenAPI document: 0.0.86
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from jina_ai_python_sdk import schemas  # noqa: F401


class RankingOutput(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Output of the embedding service
    """


    class MetaOapg:
        required = {
            "usage",
            "model",
            "results",
        }
        
        class properties:
            model = schemas.StrSchema
        
            @staticmethod
            def results() -> typing.Type['RankingOutputResults']:
                return RankingOutputResults
        
            @staticmethod
            def usage() -> typing.Type['ApiSchemasRankUsage']:
                return ApiSchemasRankUsage
            __annotations__ = {
                "model": model,
                "results": results,
                "usage": usage,
            }
    
    usage: 'ApiSchemasRankUsage'
    model: MetaOapg.properties.model
    results: 'RankingOutputResults'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["results"]) -> 'RankingOutputResults': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> 'ApiSchemasRankUsage': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["model", "results", "usage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["results"]) -> 'RankingOutputResults': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> 'ApiSchemasRankUsage': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["model", "results", "usage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        usage: 'ApiSchemasRankUsage',
        model: typing.Union[MetaOapg.properties.model, str, ],
        results: 'RankingOutputResults',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RankingOutput':
        return super().__new__(
            cls,
            *args,
            usage=usage,
            model=model,
            results=results,
            _configuration=_configuration,
            **kwargs,
        )

from jina_ai_python_sdk.model.api_schemas_rank_usage import ApiSchemasRankUsage
from jina_ai_python_sdk.model.ranking_output_results import RankingOutputResults
