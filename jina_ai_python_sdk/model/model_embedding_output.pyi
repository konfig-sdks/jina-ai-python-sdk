# coding: utf-8

"""
    The Jina Embedding Serving API

    This is the UniversalAPI to access all the Jina embedding models

    The version of the OpenAPI document: 0.0.86
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from jina_ai_python_sdk import schemas  # noqa: F401


class ModelEmbeddingOutput(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Output of the embedding service
    """


    class MetaOapg:
        required = {
            "data",
            "usage",
            "model",
        }
        
        class properties:
            model = schemas.StrSchema
        
            @staticmethod
            def data() -> typing.Type['ModelEmbeddingOutputData']:
                return ModelEmbeddingOutputData
        
            @staticmethod
            def usage() -> typing.Type['ApiSchemasEmbeddingUsage']:
                return ApiSchemasEmbeddingUsage
            object = schemas.StrSchema
            __annotations__ = {
                "model": model,
                "data": data,
                "usage": usage,
                "object": object,
            }
    
    data: 'ModelEmbeddingOutputData'
    usage: 'ApiSchemasEmbeddingUsage'
    model: MetaOapg.properties.model
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'ModelEmbeddingOutputData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> 'ApiSchemasEmbeddingUsage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["model", "data", "usage", "object", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> 'ModelEmbeddingOutputData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> 'ApiSchemasEmbeddingUsage': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["model", "data", "usage", "object", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data: 'ModelEmbeddingOutputData',
        usage: 'ApiSchemasEmbeddingUsage',
        model: typing.Union[MetaOapg.properties.model, str, ],
        object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelEmbeddingOutput':
        return super().__new__(
            cls,
            *args,
            data=data,
            usage=usage,
            model=model,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from jina_ai_python_sdk.model.api_schemas_embedding_usage import ApiSchemasEmbeddingUsage
from jina_ai_python_sdk.model.model_embedding_output_data import ModelEmbeddingOutputData
